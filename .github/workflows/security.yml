name: Security Scan

on:
  workflow_dispatch:

jobs:
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'taskflow-backend'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
          --out reports/
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report-${{ github.run_number }}
        path: reports/
        retention-days: 30
    
    - name: Comment PR with security findings
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          try {
            const reportPath = path.join('reports', 'dependency-check-report.json');
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              const vulnerabilities = report.dependencies?.filter(dep => dep.vulnerabilities?.length > 0) || [];
              
              if (vulnerabilities.length > 0) {
                let comment = 'ðŸ”’ **Security Scan Results**\n\n';
                comment += `Found ${vulnerabilities.length} dependencies with vulnerabilities:\n\n`;
                
                vulnerabilities.forEach(dep => {
                  comment += `**${dep.fileName}**\n`;
                  dep.vulnerabilities.forEach(vuln => {
                    comment += `- ${vuln.name}: ${vuln.severity} (CVSS: ${vuln.cvssv3?.baseScore || 'N/A'})\n`;
                  });
                  comment += '\n';
                });
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              } else {
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: 'ðŸ”’ **Security Scan Results**\n\nâœ… No vulnerabilities found!'
                });
              }
            }
          } catch (error) {
            console.log('Could not parse security report:', error);
          }
