name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      force_deploy:
        description: 'Force deployment even if no changes'
        required: false
        default: false
        type: boolean

env:
  JAVA_VERSION: '17'
  MAVEN_VERSION: '3.9.10'
  AWS_REGION: 'eu-central-1'
  S3_BUCKET_PREFIX: 'taskflow-backend-deployments'

jobs:
  # ===========================================
  # CONTINUOUS INTEGRATION (CI)
  # ===========================================
  test:
    name: Test & Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0  # Full history for better caching
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Cache Maven dependencies
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    
    - name: Cache Maven wrapper
      uses: actions/cache@v4
      with:
        path: ~/.m2/wrapper
        key: ${{ runner.os }}-maven-wrapper-${{ hashFiles('**/.mvn/wrapper/maven-wrapper.jar') }}
    
    - name: Run tests
      run: mvn clean test
      env:
        SPRING_PROFILES_ACTIVE: test
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests
        path: target/surefire-reports/*.xml
        reporter: java-junit
    
    - name: Build application
      run: mvn clean package -DskipTests
      env:
        SPRING_PROFILES_ACTIVE: lambda
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: taskflow-backend-jar
        path: target/taskflow-backend-0.0.1-SNAPSHOT.jar
        retention-days: 7

  # ===========================================
  # SECURITY SCANNING
  # ===========================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'taskflow-backend'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
          --out reports/
    
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: reports/
        retention-days: 30

  # ===========================================
  # CODE QUALITY
  # ===========================================
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: SonarQube Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=taskflow-backend
          -Dsonar.organization=your-org
          -Dsonar.host.url=https://sonarcloud.io
          -Dsonar.java.binaries=target/classes
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  # ===========================================
  # CONTINUOUS DEPLOYMENT (CD)
  # ===========================================
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'dev')
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: taskflow-backend-jar
        path: target/
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install SAM CLI
      uses: aws-actions/setup-sam@v2
    
    - name: Deploy to Development
      run: |
        sam deploy \
          --template-file template.yaml \
          --stack-name taskflow-backend-dev \
          --s3-bucket sam-deployments-${{ env.AWS_REGION }}-$(aws sts get-caller-identity --query Account --output text) \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }} \
          --parameter-overrides \
            Environment=dev \
            JwtSecret=${{ secrets.JWT_SECRET_DEV }} \
            CorsAllowedOrigins=* \
          --no-fail-on-empty-changeset \
          --no-confirm-changeset
    
    - name: Get API URL
      id: get-api-url
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name taskflow-backend-dev \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`TaskflowApi`].OutputValue' \
          --output text)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "API URL: $API_URL"
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests against: ${{ steps.get-api-url.outputs.api_url }}"
        # Add your smoke tests here
        curl -f "${{ steps.get-api-url.outputs.api_url }}api/health/status" || exit 1
    
    - name: Comment PR with deployment info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `ðŸš€ **Development Deployment Successful!**
            
            **API URL:** ${{ steps.get-api-url.outputs.api_url }}
            
            **Test Endpoints:**
            - Health Check: ${{ steps.get-api-url.outputs.api_url }}api/health/status
            - Authentication: ${{ steps.get-api-url.outputs.api_url }}api/auth/register
            - Todos: ${{ steps.get-api-url.outputs.api_url }}api/todos`
          })

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: taskflow-backend-jar
        path: target/
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install SAM CLI
      uses: aws-actions/setup-sam@v2
    
    - name: Deploy to Staging
      run: |
        sam deploy \
          --template-file template.yaml \
          --stack-name taskflow-backend-staging \
          --s3-bucket sam-deployments-${{ env.AWS_REGION }}-$(aws sts get-caller-identity --query Account --output text) \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }} \
          --parameter-overrides \
            Environment=staging \
            JwtSecret=${{ secrets.JWT_SECRET_STAGING }} \
            CorsAllowedOrigins=${{ secrets.CORS_ORIGINS_STAGING }} \
          --no-fail-on-empty-changeset
    
    - name: Get API URL
      id: get-api-url
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name taskflow-backend-staging \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`TaskflowApi`].OutputValue' \
          --output text)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "API URL: $API_URL"
    
    - name: Run integration tests
      run: |
        echo "Running integration tests against: ${{ steps.get-api-url.outputs.api_url }}"
        # Add your integration tests here
        curl -f "${{ steps.get-api-url.outputs.api_url }}api/health/status" || exit 1

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: github.event_name == 'workflow_dispatch' && inputs.environment == 'prod'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: taskflow-backend-jar
        path: target/
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Install SAM CLI
      uses: aws-actions/setup-sam@v2
    
    - name: Deploy to Production
      run: |
        sam deploy \
          --template-file template.yaml \
          --stack-name taskflow-backend-prod \
          --s3-bucket sam-deployments-${{ env.AWS_REGION }}-$(aws sts get-caller-identity --query Account --output text) \
          --capabilities CAPABILITY_IAM \
          --region ${{ env.AWS_REGION }} \
          --parameter-overrides \
            Environment=prod \
            JwtSecret=${{ secrets.JWT_SECRET_PROD }} \
            CorsAllowedOrigins=${{ secrets.CORS_ORIGINS_PROD }} \
          --no-fail-on-empty-changeset
    
    - name: Get API URL
      id: get-api-url
      run: |
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name taskflow-backend-prod \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`TaskflowApi`].OutputValue' \
          --output text)
        echo "api_url=$API_URL" >> $GITHUB_OUTPUT
        echo "API URL: $API_URL"
    
    - name: Run production smoke tests
      run: |
        echo "Running production smoke tests against: ${{ steps.get-api-url.outputs.api_url }}"
        # Add your production smoke tests here
        curl -f "${{ steps.get-api-url.outputs.api_url }}api/health/status" || exit 1
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      if: success()
      with:
        status: success
        text: 'ðŸš€ Production deployment successful!'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}

  # ===========================================
  # CLEANUP
  # ===========================================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-staging, deploy-prod]
    if: always()
    
    steps:
    - name: Clean up old artifacts
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const cutoff = new Date();
          cutoff.setDate(cutoff.getDate() - 7); // Keep artifacts for 7 days
          
          for (const artifact of artifacts.data.artifacts) {
            if (new Date(artifact.created_at) < cutoff) {
              await github.rest.actions.deleteArtifact({
                owner: context.repo.owner,
                repo: context.repo.repo,
                artifact_id: artifact.id
              });
              console.log(`Deleted old artifact: ${artifact.name}`);
            }
          }
